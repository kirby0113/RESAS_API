{"version":3,"sources":["components/Header.js","components/CheckBoxs.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","CheckBoxs","props","modalState","prefs","map","pref","htmlFor","prefName","type","name","value","prefCode","id","onChange","onChangeCheck","Graph","useState","graphState","setGraphState","useEffect","datasets","graphDatas","graphData","validdata","data","year","filter","label","key","fill","lineTension","backgroundColor","color","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBoderWidth","pointRadius","pointHitRadius","length","labels","lineGraph","options","maintainAspectRatio","isLoaded","App","setPrefs","checkedBoxArray","setCheckedBoxArray","setGraphDatas","setIsLoaded","windowDimentions","setWindowDimentions","setModalState","useRef","current","window","addEventListener","x","parent","screen","width","y","height","axios","get","headers","then","res","result","Math","floor","random","error","console","log","datas","el","a","response","onClick","e","prevCheckedBoxArray","Number","target","includes","processedArray","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66d2a8dc.chunk.js","sourcesContent":["import './Header.css';\n\nconst Header = () => {\n  return (\n    <div className=\"Header\">\n      <span className=\"HeaderTitle\">RESAS_API_Population</span>\n    </div>\n  );\n};\n\nexport default Header;\n","import './CheckBoxs.css';\n\nconst CheckBoxs = (props) => {\n  return (\n    <div className={\"CheckBoxs\" + \" \" + (props.modalState ? \"modalActive\" : \"\")}>\n      {props.prefs.map((pref) => (\n        <div key={pref.prefName}>\n          <label htmlFor={pref.prefName}>{pref.prefName}</label>\n          <input\n            type=\"checkbox\"\n            className=\"checkbox\"\n            name=\"prefName\"\n            value={pref.prefCode}\n            id={pref.prefName}\n            onChange={props.onChangeCheck}></input>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CheckBoxs;\n","import {useEffect, useState} from 'react';\n\nimport {Line} from 'react-chartjs-2';\n\nimport \"./Graph.css\";\n\nfunction Graph(props) {\n  const [graphState, setGraphState] = useState();\n  useEffect(() => {\n    let datasets = props.graphDatas.map((graphData) => {\n      const validdata = graphData.data\n        .map((data) => {\n          if (data.year >= 1995 && data.year <= 2020) {\n            return data.value;\n          } else {\n            return;\n          }\n        })\n        .filter((data) => data);\n\n      return {\n        label: graphData.key,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: graphData.color,\n        borderColor: graphData.color,\n        borderCapStyle: 'round',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'square',\n        pointBorderColor: 'rgba(255,0,0)',\n        pointBackgroundColor: '#eee',\n        pointBorderWidth: 10,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(0,255,0)', //各ポイントにカーソルが当たった時のポイントの背景色\n        pointHoverBorderColor: 'rgba(0,0,255)', //各ポイントにカーソルが当たった時のポインタのボーダー色\n        pointHoverBoderWidth: 1,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: validdata,\n      };\n    });\n    if(datasets.length === 0){ //APIからデータを取得していないときは空のグラフを生成する\n      datasets = [{\n        label:\"\",\n        data: [],\n      }];\n    }\n    const data = {\n      labels: ['1995年', '2000年', '2005年', '2010年', '2015年', '2020年'],\n      datasets: datasets,\n    };\n    setGraphState(data);\n  }, [props.graphDatas]);\n\n  const lineGraph = (\n    <div className=\"graph-container\">\n      <Line data={graphState} options={{\n      maintainAspectRatio:false,\n      }}/>\n      <span className=\"y-label\">人口数</span>\n      <span className=\"x-label\">年</span>\n    </div>\n  );\n\n  return (\n    <div>\n      <h2 className=\"graphHeading\">各都道府県の人口推移</h2>\n      {props.isLoaded ? lineGraph : <h2>NowLoading...</h2>}\n    </div>\n  );\n}\n\nexport default Graph;\n","import {useEffect, useState,useRef} from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport Header from './components/Header';\nimport CheckBoxs from './components/CheckBoxs';\nimport Graph from './components/Graph';\n\nfunction App() {\n\n  const [prefs, setPrefs] = useState([]); //APIから取得した都道府県を保存\n  const [checkedBoxArray, setCheckedBoxArray] = useState([]); //チェックボックスのチェック状態を保存\n  const [graphDatas, setGraphDatas] = useState([]); //APIから取得したグラフ用のデータを保存\n  const [isLoaded,setIsLoaded] = useState(false); //APIからグラフ用のデータを取得し終わったかを保存\n  const [windowDimentions,setWindowDimentions] = useState({}); //現在のウィンドウサイズを保存\n  const [modalState,setModalState] = useState(false); //モーダル要素が表示されているかを保存（一定未満のサイズの時、チェックボックスをモーダル要素にしています）\n\n  const dimentionsRef = useRef(null); //useRefを使用して、最新の状態のウィンドウサイズを取得\n  dimentionsRef.current = windowDimentions;\n\n  useEffect(() => { //ウィンドウサイズが変更された場合に、最新のウィンドウサイズを保存\n    window.addEventListener(\"resize\",() => {\n      setWindowDimentions({\n        x:window.parent.screen.width,\n        y:window.parent.screen.height,\n      });\n    });\n  },[]);\n\n  //APIから都道府県名の取得\n  useEffect(() => {\n    try {\n      axios\n        .get('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n          headers: {\n            'X-API-KEY': 'QdcBeaEZsZeDqYRyHdNIpt4iU26GTa8ERHG1tdXh',\n          },\n        })\n        .then((res) => {\n          const prefs = res.data.result.map((pref) => {\n            return {\n            prefName:pref.prefName,\n            prefCode:pref.prefCode,\n            color:`rgba(${Math.floor(Math.random() * 255)},${Math.floor(\n              Math.random() * 255\n            )},${Math.floor(Math.random() * 255)})`\n            }\n          });\n          setPrefs(prefs);\n        });\n    } catch (error) {\n      console.log('error:', error);\n    }\n  }, []);\n\n  const onChangeCheck = (e) => {\n    setCheckedBoxArray((prevCheckedBoxArray) => {\n      let value = Number(e.target.value);\n      if (prevCheckedBoxArray.includes(value)) {\n        let processedArray = prevCheckedBoxArray.filter((el) => el !== value);\n        return [...processedArray];\n      } else {\n        return [...prevCheckedBoxArray, Number(e.target.value)];\n      }\n    });\n  };\n\n  //チェックされている都道府県の人口データをAPIから取得\n  useEffect(() => {\n    let datas = [];\n    setGraphDatas([]);\n    setIsLoaded(false);\n    try {\n      checkedBoxArray.map(async (el) => {\n        let data = await axios\n          .get(\n            `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${el}`,\n            {\n              headers: {\n                'X-API-KEY': 'QdcBeaEZsZeDqYRyHdNIpt4iU26GTa8ERHG1tdXh',\n              },\n            }\n          )\n          .then((response) => response.data.result.data[0].data);\n        datas = [\n          ...datas,\n          {\n            key: prefs[el - 1].prefName,\n            color:prefs[el - 1].color,\n            data: data,\n          },\n        ];\n\n        setGraphDatas(datas);\n      });\n    } catch (error) {\n      console.log('error:', error);\n    }\n  }, [checkedBoxArray]);\n\n  //グラフのデータが読み込めた時にグラフを表示する\n  useEffect(() => {\n    if(graphDatas.length === checkedBoxArray.length){ \n      setIsLoaded(true);\n      }\n  },[graphDatas])\n\n  return (\n    <div className=\"App\">\n      {windowDimentions.y > 650 && windowDimentions.x > 760 ? \"\" : <div className={\"overray\" + \" \" + (modalState ? \"overrayActive\" : \"\")} onClick={() => {setModalState(false)}}></div>}\n      {windowDimentions.y > 650 && windowDimentions.x > 760 ? \"\" : <div className={\"closeButton\" + \" \" + (modalState ? \"closeButtonActive\" : \"\")}>&#935;</div>}\n      <Header></Header>\n      {windowDimentions.y > 650 && windowDimentions.x > 760 ? <h2>都道府県</h2> : <div className = \"openModalButton\" onClick={() => {setModalState(true)}}>都道府県を選ぶ</div>}\n      <CheckBoxs onChangeCheck={onChangeCheck} prefs={prefs} modalState={modalState}></CheckBoxs>\n      <Graph graphDatas={graphDatas} isLoaded={isLoaded}></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}