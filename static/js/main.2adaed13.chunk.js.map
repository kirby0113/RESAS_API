{"version":3,"sources":["components/Header.js","components/CheckBoxs.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","CheckBoxs","props","modalState","prefs","map","pref","htmlFor","prefName","type","name","value","prefCode","id","onChange","onChangeCheck","Graph","useState","graphState","setGraphState","useEffect","datasets","graphDatas","graphData","validdata","data","year","filter","label","key","fill","lineTension","backgroundColor","color","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBoderWidth","pointRadius","pointHitRadius","length","labels","lineGraph","options","maintainAspectRatio","isLoaded","API_KEY","App","setPrefs","checkedBoxArray","setCheckedBoxArray","setGraphDatas","setIsLoaded","x","window","innerWidth","y","innerHeight","windowDimentions","setWindowDimentions","setModalState","dimentionsRef","useRef","current","addEventListener","axios","get","headers","then","res","result","Math","floor","random","error","console","log","datas","el","a","response","onClick","e","prevCheckedBoxArray","Number","target","includes","processedArray","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAeeA,EARA,WACb,OACE,qBAAKC,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,qCCmBSC,G,OAtBG,SAACC,GACjB,OACE,qBAAKF,UAAW,cAAqBE,EAAMC,WAAa,cAAgB,IAAxE,SACGD,EAAME,MAAMC,KAAI,SAACC,GAAD,OACf,gCACE,uBAAON,UAAU,iBAAiBO,QAASD,EAAKE,SAAhD,SACGF,EAAKE,WAER,uBACEC,KAAK,WACLT,UAAU,WACVU,KAAK,WACLC,MAAOL,EAAKM,SACZC,GAAIP,EAAKE,SACTM,SAAUZ,EAAMa,kBAVVT,EAAKE,iB,QCiFRQ,G,OAjFD,SAACd,GACb,MAAoCe,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WAER,IAAIC,EAAWnB,EAAMoB,WAAWjB,KAAI,SAACkB,GAEnC,IAAMC,EAAYD,EAAUE,KACzBpB,KAAI,SAACoB,GACJ,OAAIA,EAAKC,MAAQ,MAAQD,EAAKC,MAAQ,KAC7BD,EAAKd,WAEZ,KAGHgB,QAAO,SAACF,GAAD,OAAUA,KAGpB,MAAO,CACLG,MAAOL,EAAUM,IACjBC,MAAM,EACNC,YAAa,GACbC,gBAAiBT,EAAUU,MAC3BC,YAAaX,EAAUU,MACvBE,eAAgB,QAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,SACjBC,iBAAkB,gBAClBC,qBAAsB,OACtBC,iBAAkB,GAClBC,iBAAkB,EAClBC,0BAA2B,gBAC3BC,sBAAuB,gBACvBC,qBAAsB,EACtBC,YAAa,EACbC,eAAgB,GAChBtB,KAAMD,MAKc,IAApBH,EAAS2B,SACX3B,EAAW,CACT,CACEO,MAAO,GACPH,KAAM,MAUZN,EAJa,CACX8B,OAAQ,CAAC,aAAS,aAAS,aAAS,aAAS,aAAS,cACtD5B,SAAUA,MAGX,CAACnB,EAAMoB,aAGV,IAAM4B,EACJ,sBAAKlD,UAAU,kBAAf,UACE,cAAC,IAAD,CACEyB,KAAMP,EACNiC,QAAS,CACPC,qBAAqB,KAGzB,sBAAMpD,UAAU,UAAhB,gCACA,sBAAMA,UAAU,UAAhB,uBAIJ,OACE,gCACE,oBAAIA,UAAU,gBAAd,0EACCE,EAAMmD,SAAWH,EAAY,oDCvE9BI,EAAU,2CAoJDC,EAlJH,WACV,MAA0BtC,mBAAS,IAAnC,mBAAOb,EAAP,KAAcoD,EAAd,KACA,EAA8CvC,mBAAS,IAAvD,mBAAOwC,EAAP,KAAwBC,EAAxB,KACA,EAAoCzC,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBqC,EAAnB,KACA,EAAgC1C,oBAAS,GAAzC,mBAAOoC,EAAP,KAAiBO,EAAjB,KACA,EAAgD3C,mBAAS,CACvD4C,EAAGC,OAAOC,WACVC,EAAGF,OAAOG,cAFZ,mBAAOC,EAAP,KAAyBC,EAAzB,KAIA,EAAoClD,oBAAS,GAA7C,mBAAOd,EAAP,KAAmBiE,EAAnB,KAEMC,EAAgBC,iBAAO,MAC7BD,EAAcE,QAAUL,EAExB9C,qBAAU,WAER0C,OAAOU,iBAAiB,UAAU,WAChCL,EAAoB,CAClBN,EAAGC,OAAOC,WACVC,EAAGF,OAAOG,mBAGb,IAGH7C,qBAAU,WACR,IACEqD,IACGC,IAAI,yDAA0D,CAC7DC,QAAS,CACP,YAAarB,KAGhBsB,MAAK,SAACC,GACL,IAAMzE,EAAQyE,EAAIpD,KAAKqD,OAAOzE,KAAI,SAACC,GACjC,MAAO,CACLE,SAAUF,EAAKE,SACfI,SAAUN,EAAKM,SACfqB,MAAM,QAAD,OAAU8C,KAAKC,MAAsB,IAAhBD,KAAKE,UAA1B,YAA6CF,KAAKC,MAAsB,IAAhBD,KAAKE,UAA7D,YAAgFF,KAAKC,MACxE,IAAhBD,KAAKE,UADF,SAKTzB,EAASpD,MAEb,MAAO8E,GACPC,QAAQC,IAAI,SAAUF,MAEvB,IAqDH,OArCA9D,qBAAU,WACR,IAAIiE,EAAQ,GACZ1B,EAAc,IACdC,GAAY,GAEZ,IACEH,EAAgBpD,IAAhB,uCAAoB,WAAOiF,GAAP,eAAAC,EAAA,sEACDd,IACdC,IADc,wGACuFY,GAAM,CAC1GX,QAAS,CACP,YAAarB,KAGhBsB,MAAK,SAACY,GAAD,OAAcA,EAAS/D,KAAKqD,OAAOrD,KAAK,GAAGA,QAPjC,OACdA,EADc,OAQlB4D,EAAK,sBACAA,GADA,CAEH,CACExD,IAAKzB,EAAMkF,EAAK,GAAG9E,SACnByB,MAAO7B,EAAMkF,EAAK,GAAGrD,MACrBR,KAAMA,KAGVkC,EAAc0B,GAhBI,2CAApB,uDAkBA,MAAOH,GACPC,QAAQC,IAAI,SAAUF,MAEvB,CAACzB,IAGJrC,qBAAU,WACJE,EAAW0B,SAAWS,EAAgBT,QACxCY,GAAY,KAEb,CAACtC,IAIF,sBAAKtB,UAAU,MAAf,UACGqE,EAAcE,QAAQP,EAAI,KAAOK,EAAcE,QAAQV,EAAI,IAC1D,GAEA,qBACE7D,UAAW,YAAmBG,EAAa,gBAAkB,IAC7DsF,QAAS,WACPrB,GAAc,IAHlB,kBASDC,EAAcE,QAAQP,EAAI,KAAOK,EAAcE,QAAQV,EAAI,IAC1D,GAEA,qBACE7D,UAAW,gBAAuBG,EAAa,oBAAsB,IACrEsF,QAAS,WACPrB,GAAc,IAHlB,oBASF,cAAC,EAAD,IACCC,EAAcE,QAAQP,EAAI,KAAOK,EAAcE,QAAQV,EAAI,IAC1D,oBAAI7D,UAAU,eAAd,sCAEA,qBACEA,UAAU,kBACVyF,QAAS,WACPrB,GAAc,IAHlB,wDASF,cAAC,EAAD,CAAWrD,cAzFO,SAAC2E,GACrBhC,GAAmB,SAACiC,GAClB,IAAIhF,EAAQiF,OAAOF,EAAEG,OAAOlF,OAC5B,GAAIgF,EAAoBG,SAASnF,GAAQ,CACvC,IAAIoF,EAAiBJ,EAAoBhE,QAAO,SAAC2D,GAAD,OAAQA,IAAO3E,KAC/D,OAAO,YAAIoF,GAEX,MAAM,GAAN,mBAAWJ,GAAX,CAAgCC,OAAOF,EAAEG,OAAOlF,aAkFTP,MAAOA,EAAOD,WAAYA,IACnE,cAAC,EAAD,CAAOmB,WAAYA,EAAY+B,SAAUA,QCnJhC2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtB,MAAK,YAAgD,IAA9CuB,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.2adaed13.chunk.js","sourcesContent":["/*\nヘッダー用のコンポーネントです。\n今回はタイトルのみ表示しています。\n*/\n\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <div className='Header'>\n      <span className='HeaderTitle'>RESAS_API_Population</span>\n    </div>\n  );\n};\n\nexport default Header;\n","/*\nチェックボックス群を生成するためのコンポーネントです。\nAPIから取得した都道府県名のデータをもとに、必要な数だけチェックボックスを動的に作成しています。\n*/\n\nimport './CheckBoxs.css';\n\nconst CheckBoxs = (props) => {\n  return (\n    <div className={'CheckBoxs' + ' ' + (props.modalState ? 'modalActive' : '')}>\n      {props.prefs.map((pref) => (\n        <div key={pref.prefName}>\n          <label className='checkbox-label' htmlFor={pref.prefName}>\n            {pref.prefName}\n          </label>\n          <input\n            type='checkbox'\n            className='checkbox'\n            name='prefName'\n            value={pref.prefCode}\n            id={pref.prefName}\n            onChange={props.onChangeCheck}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CheckBoxs;\n","/*\nグラフを表示するためのコンポーネントです。\nAPIから取得した各都道府県の人口データをもとに、グラフ作成に必要なデータを作りグラフ化します。\n*/\n\nimport {useEffect, useState} from 'react';\n\nimport {Line} from 'react-chartjs-2';\n\nimport './Graph.css';\n\nconst Graph = (props) => {\n  const [graphState, setGraphState] = useState();\n\n  useEffect(() => {\n    //必要な数だけグラフデータを作成し、datasetsとする\n    let datasets = props.graphDatas.map((graphData) => {\n      //1995年から2020年までのデータのみ抽出する\n      const validdata = graphData.data\n        .map((data) => {\n          if (data.year >= 1995 && data.year <= 2020) {\n            return data.value;\n          } else {\n            return;\n          }\n        })\n        .filter((data) => data);\n\n      //抽出したデータをもとに、必要な数のdatasetsを作成\n      return {\n        label: graphData.key,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: graphData.color,\n        borderColor: graphData.color,\n        borderCapStyle: 'round',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'square',\n        pointBorderColor: 'rgba(255,0,0)',\n        pointBackgroundColor: '#eee',\n        pointBorderWidth: 10,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(0,255,0)', //各ポイントにカーソルが当たった時のポイントの背景色\n        pointHoverBorderColor: 'rgba(0,0,255)', //各ポイントにカーソルが当たった時のポインタのボーダー色\n        pointHoverBoderWidth: 1,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: validdata,\n      };\n    });\n\n    //APIからデータを取得していないときは空のグラフを生成する\n    if (datasets.length === 0) {\n      datasets = [\n        {\n          label: '',\n          data: [],\n        },\n      ];\n    }\n\n    //作成したグラフデータをgraphStateセット\n    const data = {\n      labels: ['1995年', '2000年', '2005年', '2010年', '2015年', '2020年'],\n      datasets: datasets,\n    };\n    setGraphState(data);\n  }, [props.graphDatas]);\n\n  //表示する折れ線グラフとラベルをまとめてlineGraphとしています\n  const lineGraph = (\n    <div className='graph-container'>\n      <Line\n        data={graphState}\n        options={{\n          maintainAspectRatio: false,\n        }}\n      />\n      <span className='y-label'>人口数</span>\n      <span className='x-label'>年</span>\n    </div>\n  );\n\n  return (\n    <div>\n      <h2 className='graph-heading'>各都道府県の人口推移</h2>\n      {props.isLoaded ? lineGraph : <h2>NowLoading...</h2>}\n    </div>\n  );\n};\n\nexport default Graph;\n","/*\n各コンポーネント等をまとめ、表示しているコンポーネントです。\nここからAPIに接続し、取得したデータを必要な場所に回しています。\n\n横幅760px未満、もしくは650px未満の時にはレスポンシブに対応できるように、\n出力するコンポーネントを変更しています。(dimentionsRef.current.x dimentionsRef.current.y)\n*/\n\nimport {useEffect, useState, useRef} from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport Header from './components/Header';\nimport CheckBoxs from './components/CheckBoxs';\nimport Graph from './components/Graph';\n\nconst API_KEY = 'QdcBeaEZsZeDqYRyHdNIpt4iU26GTa8ERHG1tdXh';\n\nconst App = () => {\n  const [prefs, setPrefs] = useState([]); //APIから取得した都道府県を保存\n  const [checkedBoxArray, setCheckedBoxArray] = useState([]); //チェックボックスのチェック状態を保存\n  const [graphDatas, setGraphDatas] = useState([]); //APIから取得したグラフ用のデータを保存\n  const [isLoaded, setIsLoaded] = useState(false); //APIからグラフ用のデータを取得し終わったかを保存\n  const [windowDimentions, setWindowDimentions] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  }); //現在のウィンドウサイズを保存\n  const [modalState, setModalState] = useState(false); //モーダル要素が表示されているかを保存（一定未満のサイズの時、チェックボックスをモーダル要素にしています）\n\n  const dimentionsRef = useRef(null); //useRefを使用して、最新の状態のウィンドウサイズを取得\n  dimentionsRef.current = windowDimentions;\n\n  useEffect(() => {\n    //ウィンドウサイズが変更された場合に、最新のウィンドウサイズを保存\n    window.addEventListener('resize', () => {\n      setWindowDimentions({\n        x: window.innerWidth,\n        y: window.innerHeight,\n      });\n    });\n  }, []);\n\n  //APIから都道府県名の取得(最初のレンダリング時のみ実行)\n  useEffect(() => {\n    try {\n      axios\n        .get('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n          headers: {\n            'X-API-KEY': API_KEY,\n          },\n        })\n        .then((res) => {\n          const prefs = res.data.result.map((pref) => {\n            return {\n              prefName: pref.prefName,\n              prefCode: pref.prefCode,\n              color: `rgba(${Math.floor(Math.random() * 255)},${Math.floor(Math.random() * 255)},${Math.floor(\n                Math.random() * 255\n              )})`,\n            };\n          });\n          setPrefs(prefs);\n        });\n    } catch (error) {\n      console.log('error:', error);\n    }\n  }, []);\n\n  //チェックボックスのチェック状態を保存\n  const onChangeCheck = (e) => {\n    setCheckedBoxArray((prevCheckedBoxArray) => {\n      let value = Number(e.target.value);\n      if (prevCheckedBoxArray.includes(value)) {\n        let processedArray = prevCheckedBoxArray.filter((el) => el !== value);\n        return [...processedArray];\n      } else {\n        return [...prevCheckedBoxArray, Number(e.target.value)];\n      }\n    });\n  };\n\n  //チェックされている都道府県の人口データをAPIから取得（チェック状態が変化したときに実行）\n  useEffect(() => {\n    let datas = [];\n    setGraphDatas([]);\n    setIsLoaded(false);\n\n    try {\n      checkedBoxArray.map(async (el) => {\n        let data = await axios\n          .get(`https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${el}`, {\n            headers: {\n              'X-API-KEY': API_KEY,\n            },\n          })\n          .then((response) => response.data.result.data[0].data);\n        datas = [\n          ...datas,\n          {\n            key: prefs[el - 1].prefName,\n            color: prefs[el - 1].color,\n            data: data,\n          },\n        ];\n        setGraphDatas(datas);\n      });\n    } catch (error) {\n      console.log('error:', error);\n    }\n  }, [checkedBoxArray]);\n\n  //グラフのデータが読み込めた時にグラフを表示する（グラフデータが変化したときに実行）\n  useEffect(() => {\n    if (graphDatas.length === checkedBoxArray.length) {\n      setIsLoaded(true);\n    }\n  }, [graphDatas]);\n\n  //横幅が760px未満か、縦幅が650px未満の時、モーダル用のコンポーネントを出力しています。\n  return (\n    <div className='App'>\n      {dimentionsRef.current.y > 650 && dimentionsRef.current.x > 760 ? (\n        ''\n      ) : (\n        <div\n          className={'overray' + ' ' + (modalState ? 'overrayActive' : '')}\n          onClick={() => {\n            setModalState(false);\n          }}\n        >\n          &nbsp;\n        </div>\n      )}\n      {dimentionsRef.current.y > 650 && dimentionsRef.current.x > 760 ? (\n        ''\n      ) : (\n        <div\n          className={'closeButton' + ' ' + (modalState ? 'closeButtonActive' : '')}\n          onClick={() => {\n            setModalState(false);\n          }}\n        >\n          &#935;\n        </div>\n      )}\n      <Header></Header>\n      {dimentionsRef.current.y > 650 && dimentionsRef.current.x > 760 ? (\n        <h2 className=\"pref-heading\">都道府県</h2>\n      ) : (\n        <div\n          className='openModalButton'\n          onClick={() => {\n            setModalState(true);\n          }}\n        >\n          都道府県を選ぶ\n        </div>\n      )}\n      <CheckBoxs onChangeCheck={onChangeCheck} prefs={prefs} modalState={modalState}></CheckBoxs>\n      <Graph graphDatas={graphDatas} isLoaded={isLoaded}></Graph>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}